name: Run import job -2
on:
  # push:
  #   branches: 
  #     - main
  workflow_dispatch:
jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Import variable to the Project-2
      shell: pwsh
      env: 
        destProjectName: First-project
        OCTOPUS_SERVER_URL: ${{ secrets.OCTOPUS_SERVER_URL }}
        OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        SpaceName: Default
        variableSetFilePath: variable.json
      run: | 
        # Define octopus variables
        $octopusURL = "$env:OCTOPUS_SERVER_URL"
        $octopusAPIKey = "$env:OCTOPUS_API_KEY"
        $header = @{ "X-Octopus-ApiKey" = $octopusAPIKey }
        $header.Add("Content-Type","application/json")

        # Define working variables
        $spaceName = "Default"
        $variableSetFilePath = "$env:variableSetFilePath"
        $destinationProjectName = "$env:destProjectName"

        # Set this value to add additional variable values found on source data not in destination
        $addAdditionalVariableValuesOnExistingVariableSets = $True
        # Set this value to to true to overwrite existing variable values
        $overwriteExistingVariables = $True

        # Set this value to to true to keep existing account variable values unchanged from the source file
        $keepSourceAccountVariableValues = $True

        #region "Functions"
        function Convert-SourceIdListToDestinationIdList {
            param(
                $SourceList,
                $DestinationList,
                $IdList
            )

            $NewIdList = @()
            Write-Host "Converting id list with $($IdList.Length) item(s) over to destination space"     
            foreach ($idValue in $idList) {
                $ConvertedId = Convert-SourceIdToDestinationId -SourceList $SourceList -DestinationList $DestinationList -IdValue $idValue

                if ($null -ne $ConvertedId) {
                    $NewIdList += $ConvertedId
                }
            }

            return @($NewIdList)
        }

        function Convert-SourceIdToDestinationId {
            param(
                $SourceList,
                $DestinationList,
                $IdValue
            )

            $idValueSplit = $IdValue -split "-"
            if ($idValueSplit.Length -le 2) {
                if (($idValueSplit[1] -match "^[\d\.]+$") -eq $false) {
                    Write-Host "The id value $idValue is a built in id, no need to convert, returning it."
                    return $IdValue
                }
            }
            
            Write-Host "Getting Name of $IdValue"
            $sourceItem = Get-OctopusItemById -ItemList $SourceList -ItemId $IdValue

            $nameToUse = $sourceItem.Name
            if ([string]::IsNullOrWhiteSpace($nameToUse)) {
                Write-Host "The name property is null attempting the username property"
                $nameToUse = $sourceItem.UserName
            }

            if ([string]::IsNullOrWhiteSpace($nameToUse)) {
                Write-Host "Unable to find a name property for $IdValue"
                return $null
            }

            Write-Host "The name of $IdValue is $nameToUse, attempting to find in destination list"    

            $destinationItem = Get-OctopusItemByName -ItemName $nameToUse -ItemList $DestinationList    

            if ($null -eq $destinationItem) {
                Write-Host "Unable to find $nameToUse in the destination list"
                return $null
            }
            else {
                Write-Host "The destination id for $nameToUse is $($destinationItem.Id)"
                return $destinationItem.Id
            }
        }

        function Get-OctopusItemById {
            param (
                $ItemList,
                $ItemId
            ) 
                
            Write-Host "Attempting to find $ItemId in the item list of $($ItemList.Length) item(s)"

            foreach ($item in $ItemList) {
                Write-Host "Checking to see if $($item.Id) matches with $ItemId"
                if ($item.Id -eq $ItemId) {
                    Write-Host "The Ids match, return the item $($item.Name)"
                    return $item
                }
            }

            Write-Host "No match found returning null"
            return $null    
        }

        function Get-OctopusItemByName {
            param (
                $ItemList,
                $ItemName
            )    

            return ($ItemList | Where-Object { $_.Name -eq $ItemName })
        }
        #endregion

        # Get space
        $spaceList = Invoke-RestMethod "$octopusURL/api/spaces/all" -Headers $header
        $space = $spaceList.Items | Where-Object { $_.Name -eq $spaceName }

        # Get destination project
        $projectList = Invoke-RestMethod "$octopusURL/api/$($space.Id)/projects/all" -Headers $header
        $destinationProject = $projectList | Where-Object { $_.Name -eq $destinationProjectName }
        $destinationProjectVariableSetId = $destinationProject.VariableSetId

        # Load variables from variable.json file
        $variableJsonPath = "/path/to/variable.json"
        $variableJsonContent = Get-Content -Path $variableJsonPath -Raw | ConvertFrom-Json

        # Extract and process variables
        foreach ($variable in $variableJsonContent.Variables) {
            $variableName = $variable.Name
            $variableValue = $variable.Value
            $variableScope = $variable.Scope

            Write-Host "Processing variable: $variableName with value: $variableValue"

            # Convert Environment scope if exists
            if ($variableScope.Environment) {
                $newEnvironmentIds = Convert-SourceIdListToDestinationIdList -SourceList $sourceEnvironmentList -DestinationList $destinationEnvironmentList -IdList $variableScope.Environment
                $variableScope.Environment = $newEnvironmentIds
            }

            # Additional scope conversions can be added here

            # Add or update the variable in the destination variable set
            $existingVariable = $destinationVariableSetVariables.Variables | Where-Object { $_.Name -eq $variableName }
            
            if ($existingVariable) {
                if ($overwriteExistingVariables) {
                    Write-Host "Updating existing variable: $variableName"
                    $existingVariable.Value = $variableValue
                    $existingVariable.Scope = $variableScope
                } else {
                    Write-Host "Skipping existing variable: $variableName"
                }
            } else {
                Write-Host "Adding new variable: $variableName"
                $destinationVariableSetVariables.Variables += [PSCustomObject]@{
                    Name = $variableName
                    Value = $variableValue
                    Scope = $variableScope
                    IsSensitive = $False  # Adjust this based on your requirements
                }
            }
        }

        # Save the updated variables to Octopus
        Write-Host "Saving variables to $octopusURL$($destinationProject.Links.Variables)"
        Invoke-RestMethod -Method Put -Uri "$octopusURL$($destinationProject.Links.Variables)" -Body ($destinationVariableSetVariables | ConvertTo-Json -Depth 10) -Headers $header | Out-Null
